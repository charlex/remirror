parameters:
  name: '' # defaults for any parameters that aren't specified
  vmImage: ''

jobs:
  - ${{ if eq(parameters.name, 'Linux') }}:
      - job: ${{ parameters.name }}Checks
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: yarn-install.yml
          - bash: yarn integrity
            displayName: 'Check yarn lock file is up to date'
          - bash: yarn ci:audit
            displayName: 'Check for security audit flags in dependencies'
          - bash: yarn lint
            displayName: 'Check all lint rules'
          - bash: yarn typecheck
            displayName: 'Typecheck code and tests'

  - ${{ if eq(parameters.name, 'Linux') }}:
      - job: ${{ parameters.name }}UnitTests
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: yarn-install.yml
          - bash: |
              yarn test
            displayName: 'Run unit tests across project'

  - ${{ if eq(parameters.name, 'Linux') }}:
      - job: ${{ parameters.name }}SizeChecks
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: yarn-install.yml
          - bash: yarn build
            displayName: 'Build project'
          - bash: yarn size
            displayName: 'Check size limits'

  - job: ${{ parameters.name }}IntegrationTests
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - checkout: self
        lfs: true
      - ${{ if eq(parameters.name, 'Linux') }}:
          - bash: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
            displayName: 'Increase file watch limit for Linux only'
      - template: yarn-install.yml
      - bash: yarn build
        displayName: 'Build project'

      - bash: yarn test:puppeteer:storybook || true
        displayName: 'Run chrome integration tests'

      - bash: yarn test:puppeteer:storybook:firefox || true
        displayName: 'Run firefox integration tests'

      - publish: $(System.DefaultWorkingDirectory)/e2e/__image_snapshots__
        condition: always()
        artifact: ImageSnapshots
